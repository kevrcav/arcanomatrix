local VectorFile = require("vector")
local Vector = VectorFile.Vector
local TriHitFile = require("hittri")
local HitTri = TriHitFile.HitTri
local HitBoxFile = require("hitbox")
local HitBox = HitBoxFile.HitBox


vect00 = Vector:new(0, 0)
vect12 = Vector:new(1, 2)
vect21 = Vector:new(2, 1)
vect22 = Vector:new(2, 2)
vect33 = Vector:new(3, 3)
vect22 = Vector:new(2, 2)
vect66 = Vector:new(6, 6)
vectn33 = Vector:new(-3, -3)
vect1d2 = Vector:new(1/2, 1/2)

local mtfun = function() end

context("Vector Testing", function()
  before(function() end)
  after(function() end)
  context("Equality", function()
    test("0equal0", function()
      assert_equal(vect00, vect00)
    end)
    test("12equal12", function()
      assert_equal(vect12, vect12)
    end)
    test("21notequal12", function()
      assert_not_equal(vect21, vect12)
    end)
  end)
  context("Addition", function()
    test("00plus12", function()
      assert_equal(Vector:add(vect00, vect12), vect12)
    end)
    test("12plus21", function()
      assert_equal(Vector:add(vect12, vect21), vect33)
    end)
    test("21plus12", function()
      assert_equal(Vector:add(vect21, vect12), vect33)
    end)
    test("m33plus33", function()
      assert_equal(Vector:add(vect33, vectn33), vect00)
    end)
    test("21plus12mut", function()
      vect21:addm(vect12)
      assert_equal(vect21, vect33)
      vect21:subm(vect12)
    end)
  end)
  context("Subtraction", function()
    test("21sub21", function()
      assert_equal(Vector:sub(vect21, vect21), vect00)
    end)
    test("33sub21", function()
      assert_equal(Vector:sub(vect33, vect21), vect12)
    end)
    test("21sub00", function()
      assert_equal(Vector:sub(vect21, vect00), vect21)
    end)
    test("00sub33", function()
      assert_equal(Vector:sub(vect00, vect33), vectn33)
    end)
    test("33sub21mut", function()
      vect33:subm(vect21)
      assert_equal(vect33, vect12)
      vect33:addm(vect21)
    end)
  end)
  context("Mult and Div", function()
    test("21by00", function()
      assert_equal(Vector:mult(vect21, vect00), vect00)
    end)
    test("21by12", function()
      assert_equal(Vector:mult(vect21, vect12), vect22)
    end)
    test("21by12by33", function()
      assert_equal(Vector:mult(Vector:mult(vect21, vect12), vect33), vect66)
    end)
    test("66div33", function()
      assert_equal(Vector:div(vect66, vect33), vect22)
    end)
    test("33by66", function()
      assert_equal(Vector:div(vect33, vect66), vect1d2)
    end)
    test("66by1d2", function()
      assert_equal(Vector:mult(vect66, vect1d2), vect33)
    end)
    test("22by33mut", function()
      vect22:multm(vect33)
      assert_equal(vect22, vect66)
      vect22:divm(vect33)
    end)
    test("22div33mut", function()
      vect22:divm(vect33)
      assert_equal(vect22, Vector:new(2/3, 2/3))
      vect22:multm(vect33)
    end)
  end)
  context("size and dot product", function()
    test("size00", function()
      assert_equal(vect00:size(), 0)
    end)
    test("size33", function()
      assert_equal(vect33:size(), math.sqrt(18))
    end)
    test("size12", function()
      assert_equal(vect12:size(), math.sqrt(5))
    end)
    test("sizeequals", function()
      assert_equal(vect12:size(), vect21:size())
    end)
    test("dot1221", function()
      assert_equal(vect12:dot(vect21), 4)
    end)
    test("dot1200", function()
      assert_equal(vect12:dot(vect00), 0)
    end)
    test("dot1212", function()
      assert_equal(vect12:dot(vect12), 5)
    end)
    test("divideByHuge", function()
      assert_equal(math.abs(- math.huge), math.huge)
    end)
  end)
end)
tri1 = HitTri:new(vect12, vect21, vect33)
tri2 = HitTri:new(vect12, vect66, vectn33)

context("Triangle Detection Testing", function()
  test("originNotWithin", function()
    assert_false(tri1:detectPointm(vect00))
  end)
  test("vect12Within", function()
    assert_true(tri1:detectPointm(vect12))
  end)
  test("vect21Within", function()
    assert_true(tri1:detectPointm(vect21))
  end)
  test("vect33Within", function()
    assert_true(tri1:detectPointm(vect33))
  end)
  test("vectnear12within", function()
    assert_true(tri1:detectPointm(vect22))
  end)
  test("originwithin", function()
    assert_true(tri2:detectPointm(vect00))
  end)
end)

hit1 = HitBox:new(vect00, vect33)
hit2 = HitBox:new(vect22, vect12)

playerX = Vector:new(350, 456.8) 
playerSize = Vector:new(50, 100)
player = HitBox:new(playerX, playerSize)
platformX = Vector:new(400, 550)
platformSize = Vector:new(800, 100)
platform = HitBox:new(platformX, platformSize)

context("Box Detection Testing", function()
  test("originWithin", function()
    assert_true(hit1:detectPoint(vect00))
  end)
  test("cornerWithin", function()
    assert_true(hit1:detectPoint(Vector:mult(vect33, vect1d2)))
  end)
  test("22Within", function()
    assert_false(hit1:detectPoint(vect22))
  end)
  test("originNotWithin", function()
    assert_false(hit2:detectPoint(vect00))
	end)
  test("boxesIntersect", function()
    assert_true(hit1:boxCollide(hit2))
  end)
  test("playerPlatIntersect", function()
    assert_true(player:boxCollide(platform))
  end)
end)  